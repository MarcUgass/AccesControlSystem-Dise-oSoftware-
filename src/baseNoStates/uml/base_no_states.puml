@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class Webserver {
- {static} PORT :int
- {static} FORMATTER : DateTimeFormatter
+ Webserver()
}

class SocketThread {
- insocked : Socked
- makeRequest(tokens : String[]) : Request
- makeRequestReader(tokens : String[]) : RequestReader
- makeRequestArea(tokens : String[]) : RequestArea
- makeHeaderAnswer() : String
- makeJsonAnswer(request : Request) : String
+ run()
}

Webserver +-right- SocketThread

note right of SocketThread
inner class
of Webserver
end note

class DirectoryDoors {
- {static} allDoors : Door[]
+ {static} makeDoors()
+ {static} findDoorById(id : String) : Door
+ {static} getAllDoors() : Door[]
}

class DirectoryAreas {
- {static} allAreas : Area[]
- {static} allDoors : Door[]
- root : Area
+ {static} makeAreas()
+ {static} findAreaById(id : String
+ {static} getAllDoors() : Door[]
}

DirectoryAreas --> "*" Door : "allDoors"

abstract class Area {
- id : String
- doors: Door[]
+ Area(id : String)
+ addDoor(door : Door)
+ getSpace() : String
+ getDoorsGivingAccess() : Door[]
+ toJson() : JSONObject
}

DirectoryAreas --> "*" Area : "allAreas"

class Partition extends Area {
- partition : Partition
- childs: Area[]
+ Partition(id: String, parent: Partition)
+ findAreaById(id : String) : Area
+ getSpace() : String
+ getDoorsGivingAccess() : Door[]
+ addChild(area : Area)
}

class Space extends Area {
- partition : Partition
- doors: Door[]
+ Space(id: String, parent: Partition)
+ getSpace() : String
+ getDoorsGivingAccess() : Door[]
+ findAreaById(id : String) : Area
+ addDoor(door : Door)
}

class DirectoryUsers {
- {static} users : User[]
+ {static} makeUsers()
+ {static} findUserByCredential(credential : String) : User
}

DirectoryUsers --> "*" User : "users"

class Door {
- id : String
- closed : boolean
+ Door(id : String)
+ processRequest(request : RequestReader)
+ setState(doorState : DoorState)
+ toJson() : JSONObject
'+ toString() : String
'+ isClosed() :boolean
'+ setClosed(b : boolean)
'+ getStateName() : String
- doAction(action : String)
}

class DoorState {
- door : Door
+ DoorState(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
+ toString() : String
}

Door -right- DoorState

class Lock extends DoorState {
+ Lock(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
+ unlock_shortly()
}

class Unlock extends DoorState {
+ Unlock(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
+ unlock_shortly()
}

class UnlockedShortly extends DoorState {
+ UnlockedShortly(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
+ unlock_shortly()
}

class Propped extends DoorState {
+ Propped(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
+ unlock_shortly()
}

class Actions {
+ {static} OPEN : String
+ {static} CLOSE : String
+ {static} LOCK : String
+ {static} UNLOCK : String
+ {static} UNLOCK_SHORTLY : String
}

class User {
- name : String
- credential : String
+ User(name: String, credential: String)
+ toString() : String
}


class Main {
+ {static} main(args : String)
}

note right of Main::main
DirectoryDoors.makeDoors()
DiretoryUsers.makeUsers()
new Webserver()
end note

Main -[hidden]down- Webserver
Webserver -[hidden]down- DirectoryDoors
DirectoryDoors -[hidden]right- DirectoryUsers
@enduml
